# -*- coding: utf-8 -*-
"""
Created on Tue Sep  1 09:11:40 2020

@author: wangjingxian
"""

#面试题 08.11. 硬币(此题暂时还没有看懂，需要重新看)
'''
硬币。给定数量不限的硬币，币值为25分、10分、5分和1分，编写代码计算n分有几种表示法。
(结果可能会很大，你需要将结果模上1000000007)

示例1:
输入: n = 5
输出：2
解释: 有两种方式可以凑成总金额:
5=5
5=1+1+1+1+1

示例2:
输入: n = 10
输出：4
解释: 有四种方式可以凑成总金额:
10=10
10=5+5
10=5+1+1+1+1+1
10=1+1+1+1+1+1+1+1+1+1

说明：
你可以假设：
0 <= n (总金额) <= 1000000
'''


'''
方法一：动态规划

'''
class Solution:
    def waysToChange(self, n: int) -> int:
        mod = 10**9 + 7
        coins = [25, 10, 5, 1]

        f = [1] + [0] * n
        for coin in coins:
            for i in range(coin, n + 1):
                f[i] += f[i - coin]
        return f[n] % mod

'''
方法二：数学
思路
对于给定的 nnn，我们先枚举 252525 分的硬币的个数 iii，那么剩下的部分我们记为 r=n−25×ir = n - 25 \times ir=n−25×i，rrr 可以表示成：
r=10×a+5×b+cr = 10 \times a + 5 \times b + c 
r=10×a+5×b+c
这里 a能取的最大值 a0=⌊r10⌋a_{0} = \lfloor \frac{r}{10} \rfloora0​=⌊10r​⌋，当 a=a0a = a_0a=a0​ 时限定 c<5c < 5c<5 可以得到这种情况下 bbb 的最大值 b0b_0b0​，那么令 c0=r−10×a0−5×b0c_0 = r - 10 \times a_0 - 5 \times b_0c0​=r−10×a0​−5×b0​。
考虑选择 iii 个 252525 分硬币的时候的情况，假设我们选择 xxx 个 101010 分硬币，那么还剩下的金额我们可以表示成：
10×(a0−x)+5×b0+c0    10 \times (a_0 - x) + 5 \times b_0 + c_0
10×(a0​−x)+5×b0​+c0​
考虑把 10×(a0−x)10 \times (a_0 - x)10×(a0​−x) 这一项全部用 555 分硬币来替代，即上面的式子可以化成 5(2a0−2x+b0)+c05 (2 a_0 - 2 x + b_0) + c_05(2a0​−2x+b0​)+c0​，那么 555 分硬币可以选择的范围是 [0,2a0−2x+b0][0, 2a_0 -  2x + b_0][0,2a0​−2x+b0​]，剩下的用 111 分硬币补齐。也就是说对于 252525 分取 iii 个，101010 分取 xxx 个的时候方案总数为 2a0−2x+b0+12 a_0 - 2 x + b_0 + 12a0​−2x+b0​+1，根据等差数列求和的方法，对 xxx 求和：
∑x=0a0(2a0−2x+b0+1)=(a0+1)(a0+b0+1)\sum_{x = 0}^{a_0} (2 a_0 - 2 x + b_0 + 1) = (a_0 + 1)(a_0 + b_0 + 1) 
x=0∑a0​​(2a0​−2x+b0​+1)=(a0​+1)(a0​+b0​+1)
我们就可以得到 252525 分取 iii 个的时候的方案总数，枚举 i并累加即可得到最终的答案。

'''

class Solution:
    def waysToChange(self, n: int) -> int:
        mod = 10**9 + 7

        ans = 0
        for i in range(n // 25 + 1):
            rest = n - i * 25
            a, b = rest // 10, rest % 10 // 5
            ans += (a + 1) * (a + b + 1)
        return ans % mod

